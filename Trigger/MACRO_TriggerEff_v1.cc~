#include "TFile.h"
#include "TTree.h"
//#include "TTreeReader.h"
//#include "TTreeReaderValue.h"

#include "TH1F.h"

#include "THStack.h"
#include "TLegend.h"

#include "TTreePlayer.h"
#include "TStyle.h"
#include "TGaxis.h"
#include "TCanvas.h"
#include "TGraphErrors.h"
#include "TGraphAsymmErrors.h"
#include "TEfficiency.h"
#include <fstream>
#include <iostream>
#include <iomanip>
#include <iostream>

#include <vector>
#include "math.h"

#include <TMultiGraph.h>

using namespace std;

void setTDRStyle();

void MACRO_TriggerEff(){
  
  cout << "working" << endl;

  setTDRStyle();

  TCanvas* c1 = new TCanvas("c1","c1",200,200,800,700);
  c1->SetGrid();

  //  TFile *f1 = TFile::Open("RunB.root","READ");
  TFile *f1 = TFile::Open("Numerator/SingleMuon_Run2016_TauPOG_Nov15.root","READ");
  if (f1 == 0) {
    printf("Error: cannot open Trig Eff root file \n");
    return;
  }

  /*
    TH1F *Numerator = (TH1F*)f1->Get("miniAOD/hFillPtNum");
    TH1F *Denominator = (TH1F*)f1->Get("miniAOD/hFillPtDen");
  */

  TH1F *Numerator = (TH1F*)f1->Get("NRecoTriggers2/TauJet1Pt");
  TH1F *Denominator = (TH1F*)f1->Get("NMuon1Tau1Combinations/TauJet1Pt");

  Int_t nbins   = Denominator->GetXaxis()->GetNbins();

  cout<<"Numerator "<< Numerator->Integral()<<"   Denominator "<< Denominator->Integral()<<endl;
  cout<<"Numerator "<< Numerator->GetXaxis()->GetNbins()<<"   Denominator "<< Denominator->GetXaxis()->GetNbins() <<endl;

  int nb = 26;
  float BINS[27] = {0.0, 2.5,  5.0,  7.5, 10.0, 12.5, 15.0, 17.5, 20.0, 22.5, 25.0, 27.5, 30.0, 
		    32.5, 35.0, 37.5, 40.0, 42.5, 45.0, 47.5, 50.0, 55.0, 60.0, 67.5, 80.0, 100.0, 200.0};

  TH1F *H_bins_num = new TH1F("h_NUM", "h_NUM", nb, BINS);
  TH1F *H_bins_den = new TH1F("h_DEN", "h_DEN", nb, BINS);


  for (int b = 1; b <= H_bins_den->GetXaxis()->GetNbins(); b++ ){
    int num_bin = 0;
    int den_bin = 0;
    //      cout << "REBIN  x min " << H_bins_den->GetXaxis()->GetBinLowEdge(b) << " x max " << (H_bins_den->GetXaxis()->GetBinLowEdge(b))+(H_bins_den->GetXaxis()->GetBinWidth(b))  << endl;
    
    for (int i = 1; i < nbins; i++ ){

      if(((( Denominator->GetXaxis()->GetBinLowEdge(i)) + (Denominator->GetXaxis()->GetBinWidth(i))) <= ((H_bins_den->GetXaxis()->GetBinLowEdge(b))+ (H_bins_den->GetXaxis()->GetBinWidth(b)))) &&
	 ((( Denominator->GetXaxis()->GetBinLowEdge(i))+ (Denominator->GetXaxis()->GetBinWidth(i))) > ((H_bins_den->GetXaxis()->GetBinLowEdge(b))))){
	
	//	  cout << "x min " << Denominator->GetXaxis()->GetBinLowEdge(i) << " x max " << (Denominator->GetXaxis()->GetBinLowEdge(i))+(Denominator->GetXaxis()->GetBinWidth(i))  << endl;
	//  cout << " num " << Numerator->GetBinContent(i) << endl;

	num_bin += Numerator->GetBinContent(i);
	den_bin += Denominator->GetBinContent(i);

      }else{
	continue;
      }

      H_bins_num->SetBinContent(b, num_bin);
      H_bins_den->SetBinContent(b, den_bin);

      //	  cout << " num  value " << num_bin << endl; 	  
      //      cout << "x min " << H_bins_den->GetXaxis()->GetBinLowEdge(b) << " x max " << (H_bins_den->GetXaxis()->GetBinLowEdge(b))+(H_bins_den->GetXaxis()->GetBinWidth(b))  << endl;
	   
	   
    }
      
  }

  for(int i = 0; i < nbins; i++){
    if(Denominator->GetXaxis()->GetNbins() >= i ){
      cout << "  Bin: " << i <<  " NumBinnned: "<< H_bins_num->GetBinContent(i) <<"  DenBinned: "<< H_bins_den->GetBinContent(i)<<  " Num: "<<Numerator->GetBinContent(i) <<"  Den: "<<Denominator->GetBinContent(i)<<endl;
    }else{
      cout << "  Bin: " << i <<  " NumBinnned: "<< " --- " <<"  DenBinned: "<< " --- " <<  " Num: "<<Numerator->GetBinContent(i) <<"  Den: "<<Denominator->GetBinContent(i)<<endl;
    }
  }


  TGraphAsymmErrors* gr1 = new TGraphAsymmErrors( H_bins_num, H_bins_den, "b(1,1) mode" );
  TMultiGraph *mg = new TMultiGraph();

  mg->Add(gr1);

  //gr = new TGraphAsymmErrors(n,x,y,exl,exh,eyl,eyh);Â¬
  TF1* gr_fit = fitGamma(gr1, 0, 10);
  gr1->SetMarkerColor(1);
  gr1->SetMarkerStyle(20);
  gr1->SetMarkerSize(1.3);
  gr1->Draw("AEP");
  gr_fit->Draw("same");

  mg->Draw("AP");

  mg->SetTitle("Trigger Efficiency MediumIsoPFTau32_Trk1_eta2p1_Reg_v");
  mg->GetXaxis()->SetTitle("p_{T} [GeV]");
  mg->GetXaxis()->SetLabelFont(42);
  mg->GetXaxis()->SetLabelSize(0.035);
  mg->GetXaxis()->SetTitleSize(0.05);
  mg->GetXaxis()->SetTitleOffset(0.89);
  mg->GetXaxis()->SetTitleFont(42);
  mg->GetYaxis()->SetTitle("#epsilon");
  mg->GetYaxis()->SetLabelFont(42);
  mg->GetYaxis()->SetLabelSize(0.035);
  mg->GetYaxis()->SetTitleSize(0.06);
  mg->GetYaxis()->SetTitleOffset(0.69);
  mg->GetYaxis()->SetTitleFont(42);
  
}

void setTDRStyle(){
  TStyle *tdrStyle = new TStyle("tdrStyle","Style for P-TDR");

  // For the canvas:
  tdrStyle->SetCanvasBorderMode(0);
  tdrStyle->SetCanvasColor(kWhite);
  tdrStyle->SetCanvasDefH(600); //Height of canvas
  tdrStyle->SetCanvasDefW(600); //Width of canvas
  tdrStyle->SetCanvasDefX(0);   //POsition on screen
  tdrStyle->SetCanvasDefY(0);
  // For the Pad:
  tdrStyle->SetPadBorderMode(0);
  // tdrStyle->SetPadBorderSize(Width_t size = 1);
  tdrStyle->SetPadColor(kWhite);
  tdrStyle->SetPadGridX(false);
  tdrStyle->SetPadGridY(false);
  tdrStyle->SetGridColor(0);
  tdrStyle->SetGridStyle(3);
  tdrStyle->SetGridWidth(1);
  // For the frame:
  tdrStyle->SetFrameBorderMode(0);
  tdrStyle->SetFrameBorderSize(1);
  tdrStyle->SetFrameFillColor(0);
  tdrStyle->SetFrameFillStyle(0);
  tdrStyle->SetFrameLineColor(1);
  tdrStyle->SetFrameLineStyle(1);
  tdrStyle->SetFrameLineWidth(1);

  // For the histo:
  tdrStyle->SetHistFillColor(0);
  // tdrStyle->SetHistFillStyle(0);
  tdrStyle->SetHistLineColor(1);
  tdrStyle->SetHistLineStyle(0);
  tdrStyle->SetHistLineWidth(1);
  // tdrStyle->SetLegoInnerR(Float_t rad = 0.5);
  // tdrStyle->SetNumberContours(Int_t number = 20);
  //  tdrStyle->SetEndErrorSize(0);
  tdrStyle->SetErrorX(0.);
  //  tdrStyle->SetErrorMarker(20);

  tdrStyle->SetMarkerStyle(20);

  //For the fit/function:
  tdrStyle->SetOptFit(1);
  tdrStyle->SetFitFormat("5.4g");
  //tdrStyle->SetFuncColor(1);
  tdrStyle->SetFuncStyle(1);
  tdrStyle->SetFuncWidth(1);

  //For the date:
  tdrStyle->SetOptDate(0);
  // tdrStyle->SetDateX(Float_t x = 0.01);
  // tdrStyle->SetDateY(Float_t y = 0.01);

  // For the statistics box:
  tdrStyle->SetOptFile(0);
  tdrStyle->SetOptStat("e"); // To display the mean and RMS:   SetOptStat("mr");
  //tdrStyle->SetStatColor(kWhite);
  tdrStyle->SetStatColor(kGray);
  tdrStyle->SetStatFont(42);

  tdrStyle->SetTextSize(11);
  tdrStyle->SetTextAlign(11);

  tdrStyle->SetStatTextColor(1);
  tdrStyle->SetStatFormat("6.4g");
  tdrStyle->SetStatBorderSize(0);
  tdrStyle->SetStatX(1.); //Starting position on X axis
  tdrStyle->SetStatY(1.); //Starting position on Y axis
  tdrStyle->SetStatFontSize(0.025); //Vertical Size
  tdrStyle->SetStatW(0.25); //Horizontal size 
  // tdrStyle->SetStatStyle(Style_t style = 1001);

  // Margins:
  tdrStyle->SetPadTopMargin(0.095);
  tdrStyle->SetPadBottomMargin(0.125);
  tdrStyle->SetPadLeftMargin(0.14);
  tdrStyle->SetPadRightMargin(0.1);

  // For the Global title:

  //  tdrStyle->SetOptTitle(0);
  tdrStyle->SetTitleFont(42);
  tdrStyle->SetTitleColor(1);
  tdrStyle->SetTitleTextColor(1);
  tdrStyle->SetTitleFillColor(10);
  tdrStyle->SetTitleFontSize(0.05);
  tdrStyle->SetTitleH(0.045); // Set the height of the title box
  //tdrStyle->SetTitleW(0); // Set the width of the title box
  tdrStyle->SetTitleX(0.15); // Set the position of the title box
  tdrStyle->SetTitleY(1.0); // Set the position of the title box
  // tdrStyle->SetTitleStyle(Style_t style = 1001);
  tdrStyle->SetTitleBorderSize(0);

  // For the axis titles:
  tdrStyle->SetTitleColor(1, "XYZ");
  tdrStyle->SetTitleFont(42, "XYZ");
  tdrStyle->SetTitleSize(0.06, "XYZ");
  // tdrStyle->SetTitleXSize(Float_t size = 0.02); // Another way to set the size?
  // tdrStyle->SetTitleYSize(Float_t size = 0.02);
  tdrStyle->SetTitleXOffset(0.9);
  tdrStyle->SetTitleYOffset(1.0);
  // tdrStyle->SetTitleOffset(1.1, "Y"); // Another way to set the Offset

  // For the axis labels:

  tdrStyle->SetLabelColor(1, "XYZ");
  tdrStyle->SetLabelFont(42, "XYZ");
  tdrStyle->SetLabelOffset(0.007, "XYZ");
  tdrStyle->SetLabelSize(0.03, "XYZ");

  // For the axis:

  tdrStyle->SetAxisColor(1, "XYZ");
  tdrStyle->SetStripDecimals(kTRUE);
  tdrStyle->SetTickLength(0.03, "XYZ");
  tdrStyle->SetNdivisions(510, "XYZ");
  tdrStyle->SetPadTickX(1);  // To get tick marks on the opposite side of the frame
  tdrStyle->SetPadTickY(1);

  // Change for log plots:
  tdrStyle->SetOptLogx(0);
  tdrStyle->SetOptLogy(0);
  tdrStyle->SetOptLogz(0);
  // Postscript options:

  tdrStyle->cd();
}

TF1* fitGamma(TGraphAsymmErrors* g, double q, double p)
{

  double  fitf(double *v, double *par){
    double arg = 0;
    if (par[3] != 0) {
      arg = (TMath::Sqrt(v[0]) - TMath::Sqrt(par[2]))/(2*par[3]);
      double fitval =  par[0] + par[1]*TMath::Freq(arg);
      return fitval;
    }
  }

  TF1 *fit = new TF1("fit",fitf,0,300,4);
  fit->SetParameters(q, p, g->GetMean(1),g->GetRMS(1));
  fit->SetParNames("P0", "P1", "Mean","Sigma");
  g->Fit("fit","R", 0, 300);
  return fit;
}

